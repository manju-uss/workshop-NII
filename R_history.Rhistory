history()
hello <- function(){
print('Hello World')
}
hello2 <- function(){print('Hello World')}
# this a variable call "a" with a value 1
# this is a numeric vector with one element
a <- 1
# another variable
b <- 1
# addition
my_output <- a + b
my_output
# this is a comment
# this is a character vector with
# a single element
gene_name <- "tp53"
# numerical vector with one element
a <- 1
b <- 10
# sum or addition
a + b
# length is a function
length(a)
# our fav. gene names
gene_names <- c('RPOB','PARP1','RXR', 'P21','ZEB2','CASPAS','PSPA',
'GAP2','GNLY','IRF2','BLIMP','DPP4','HSP90','INF3','RELB','RV0096')
# scholar names
scholar_name <- c('ARCHANA', 'WITTY', 'AZAD', 'TAVLEEN', 'SONANJALI',
'KOMAL', 'DEVENDAR', 'JASLEEN', 'RONAK', 'ANSHUL', 'JABI', 'ATHAR',
'ARNAB', 'MANJU', 'NAVEEN', 'MOHIT')
# subset vector with index
gene_names[c(3,10)]
# names is a function to check any name associated with the element
names(gene_names)
# assign names to fav gene with scholar name
names(gene_names) <- scholar_name
# now we can use the name of the scholar to access the value (gene)
gene_names['MANJU']
# we will take a smaller toy example to understand above
genes <- c('A', 'B', 'C')
genes[2]
double_name <- c('aa', 'bb', 'cc')
pathway_x <- c('aa','cc')
names(genes) <- double_name
# short cut for name and value pair
XYZ <- c(xx = 'X', yy = 'Y', zz = 'Z')
## LOGICAL VECTOR
LG <- c(TRUE,FALSE,TRUE)
# this is a comment
# this is a character vector with
# a single element
gene_name <- "tp53"
# numerical vector with one element
a <- 1
b <- 10
# sum or addition
a + b
# length is a function
length(a)
# our fav. gene names
gene_names <- c('RPOB','PARP1','RXR', 'P21','ZEB2','CASPAS','PSPA',
'GAP2','GNLY','IRF2','BLIMP','DPP4','HSP90','INF3','RELB','RV0096')
# scholar names
scholar_name <- c('ARCHANA', 'WITTY', 'AZAD', 'TAVLEEN', 'SONANJALI',
'KOMAL', 'DEVENDAR', 'JASLEEN', 'RONAK', 'ANSHUL', 'JABI', 'ATHAR',
'ARNAB', 'MANJU', 'NAVEEN', 'MOHIT')
# subset vector with index
gene_names[c(3,10)]
# names is a function to check any name associated with the element
names(gene_names)
# assign names to fav gene with scholar name
names(gene_names) <- scholar_name
# now we can use the name of the scholar to access the value (gene)
gene_names['MANJU']
# we will take a smaller toy example to understand above
genes <- c('A', 'B', 'C')
genes[2]
double_name <- c('aa', 'bb', 'cc')
pathway_x <- c('aa','cc')
names(genes) <- double_name
# short cut for name and value pair
XYZ <- c(xx = 'X', yy = 'Y', zz = 'Z')
## LOGICAL VECTOR
LG <- c(TRUE,FALSE,TRUE)
genes[LG]
!LG
genes[!LG]
genes[LG]
!LG
genes[!LG]
rm(list=ls())
# conditions
a <- 1
b <- 2
# equal to
a == b
# not equal to
a != b
# greater than
a > b
# less than
a < b
# greater than equal to
a >= b
# less than equal to
a <= b
# Maths functions
num_vec <- c(3,2,8,-1)
sum(num_vec)
log(num_vec)
log2(num_vec)
log10(c(10,100,1000))
#-------
# useful functions
# seq function
# sample values from a input
vals <- 1:100
# about set.seed() function; Random Number Generation
# without set.seed() function
samp_data <- sample(x=vals,size=50,replace=TRUE)
# with set.seed() function
set.seed(198)
samp_data <- sample(x=vals,size=50,replace=TRUE)
# Sorting vector
sort(samp_data)
# learn more about sort: ?sort
#---
# reverse a vector
rev(samp_data)
#---
# table function to see counts of values
table(samp_data)
#---
# unique function to see unique values
unique(samp_data)
rm(list=ls())
x <- rep(c(1,4,6), times=c(2,5,7))
x
# y variable, 'a','b','a','b'
y <- rep(c('a','b'), times=2)
y
# z variable, 'a','a', 'b', 'b'
z <- rep(c('a','b'),each=2)
#auto comments
#'fhknhmjlkkllk
#'ggjklj;
#'ddfgytyj
#'dfghgjg
#'
#'
# to find 6 in the vector
x==6
# output is a logical vector
idx <- x == 6
# which will give us the numerical index based
# on the logical vector-only the TRUE events
#(elements)
idx_num <- which(idx)
# reverse the logical vector
idx_not_6 <- !idx
idx_not_6
x[idx_num]
x[idx_not_6]
x[idx_num] = c(1,100)
# replace the value of 6th element in
# the vector with 19
x[8] <- 19
# replace all the values corresponding to 6
# with 100
x[idx_num] <- 100
# trying to understand how R behaves when
# we give vector with varying length/size as a input
x[idx_num] <- c(1,100)
# indexing multiple elements
x[c(1,6)]
x[rev(c(1,6))]
rm(list=ls())
install.packages('seqinr')
install.packages(Rtools)
library('seqinr')
""
gene <- seqinr::read.fasta(file = "data/IFNG_datasets/ncbi_dataset/data/gene.fna")
gene
my_list <- list(
a=c(1,7,3),
b=1:10,
c=matrix(data=1:4,2)
)
install.packages("seqinr")
savehistory("C:/Users/kmanj/Desktop/history.Rhistory")
